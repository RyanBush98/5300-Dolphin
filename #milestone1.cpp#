//
// Created by Nathan Nishi on 4/9/21.
//
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <cassert>
#include "db_cxx.h"
#include "SQLParser.h"
#include "sqlhelper.h"

using namespace std;
using namespace hsql;


string exSelect(const SelectStatement *stmt){
  // select expressiosn stored in selectList
  /* bool seenComma = false;
  string buildSelect = "";
  for (int i = 0; i < *stmt->selectList.size(); i++) {
    if (seenComma) {
      buildSelect += ", ";
    }
    buildSelect += 
    }*/
   return ("SELECT");

}

string exInsert(const InsertStatement * stmt){
    return ("INSERT");
}

string columnDefinitionToString(const ColumnDefinition *col) {
    string ret(col->name);
    switch(col->type) {
    case ColumnDefinition::DOUBLE:
        ret += " DOUBLE";
        break;
    case ColumnDefinition::INT:
        ret += " INT";
        break;
    case ColumnDefinition::TEXT:
        ret += " TEXT";
        break;
    default:
        ret += " ...";
        break;
    }
    return ret;
}

string exCreate(const CreateStatement *stmt){
  string buildCreate = "CREATE TABLE";
  buildCreate += string(stmt->tableName) + " (";
  bool seenComma = false;
  for (int i = 0; i < (*stmt->columns.size()); i++) {
    if (seenComma) buildCreate += ", ";
    buildCreate += columnDefinitionToString
  }
  return ("CREATE");
}
string execute(const SQLStatement *stmt) {
    switch (stmt->type()) {
        case kStmtSelect:
            return exSelect((const SelectStatement *) stmt);
        case kStmtInsert:
            return exInsert((const InsertStatement *) stmt);
        case kStmtCreate:
            return exCreate((const CreateStatement *) stmt);
        default:
            return "Not implemented";
    }
}

int main(int argc, char **argv) {

    char *envDir = argv[1];
    DbEnv env(0U);
    env.set_message_stream(&cout);
    env.set_error_stream(&cerr);
    while (true) {
        cout << "SQL> ";
        string stmt;
        getline(cin, stmt);
        if (stmt == "quit") break;
        SQLParserResult *parseTree = SQLParser::parseSQLString(stmt);
        for (uint i = 0; i < parseTree->size(); ++i) {
            cout << execute(parseTree->getStatement(i)) << endl;
        }
    }
    return EXIT_SUCCESS;
}


